import re
import logging
import time
from collections import defaultdict

from googleapiclient.discovery import build
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Bot
from telegram.ext import CommandHandler, MessageHandler, ConversationHandler, Application, filters
from telethon.sync import TelegramClient

from config import telegram_id, api_hash, api_id, TOKEN, YOUTUBE_API_KEY

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

tg_channels = []
last_ad_posts = {}

yt_channels = []
last_ad_videos = {}
youtube = build('youtube', 'v3', developerKey=YOUTUBE_API_KEY)

def convert_link_to_text(link):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–≥-–∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏"""
    pattern = r'https://t.me/(\w+)'
    match = re.match(pattern, link)
    if match:
        return f"@{match.group(1)}"


async def start(update, context):
    """–§—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç–∞"""
    if update.message.from_user.id == telegram_id:
        name = update.message.chat.first_name
        reply_keyboard = [['YouTube', 'Telegram']]
        await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç, {name}! —ç—Ç–æ sales-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞—Ö–æ–¥–∏—Ç—å ' \
                                        f'—Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π —É –±–ª–æ–≥–µ—Ä–æ–≤. –í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ üëá', 
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'PLATFORM'
    else: 
        await update.message.reply_text('–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        return ConversationHandler.END


async def youtube_menu(update, context):
    """–ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ —é—Ç—É–±"""
    reply_keyboard = [['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', '–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã', '–ù–∞–∑–∞–¥']]
    await update.message.reply_text('–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —é—Ç—É–±-–∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –ø–æ –ø–æ—Å—Ç–∞–º',
                                    reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
    return 'YOUTUBE_MENU'


async def youtube_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —é—Ç—É–±–∞"""
    reply_keyboard = [['–ù–∞–∑–∞–¥']]
    if str(update.message.text) == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':
        await update.message.reply_text(f'–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —é—Ç—É–±-–∫–∞–Ω–∞–ª', 
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'YOUTUBE_SUB'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        reply_keyboard = [['YouTube', 'Telegram']]
        await update.message.reply_text(f'–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ üëá', 
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'PLATFORM'
    elif str(update.message.text) == '–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã':
        await update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —é—Ç—É–±-–∫–∞–Ω–∞–ª',
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, 
                                                                         resize_keyboard=True))
        return 'YOUTUBE_CHANNEL'


async def youtube_channel(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —é—Ç—É–±-–∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    channel = update.message.text
    if channel.startswith('https://www.youtube.com/@'):
        context.user_data['channel'] = channel
    elif channel == '–ù–∞–∑–∞–¥':
        reply_keyboard = [['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è','–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã', '–ù–∞–∑–∞–¥']]
        await update.message.reply_text('–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –ø–æ –≤–∏–¥–µ–æ',
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'YOUTUBE_MENU'
    else: 
        reply_keyboard = [['–ù–∞–∑–∞–¥']]
        await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —é—Ç—É–±-–∫–∞–Ω–∞–ª',
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'YOUTUBE_CHANNEL'
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫")
    return 'YOUTUBE_POSTS'


def get_channel_id(link):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ channelId –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª YouTube."""
    username = link.split('/')[-1].replace('@', '')

    request = youtube.channels().list(
        part="contentDetails",
        forHandle=username
    )
    response = request.execute()
    return response['items'][0]['id']


async def youtube_posts(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã –Ω–∞ –∫–∞–Ω–∞–ª–µ"""
    if update.message.text == '–ù–∞–∑–∞–¥': 
        reply_keyboard = [['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è','–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã', '–ù–∞–∑–∞–¥']]
        await update.message.reply_text('–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –ø–æ –≤–∏–¥–µ–æ',
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'YOUTUBE_MENU'
    else: 
        if int(update.message.text) > 15:
            reply_keyboard = [['–ù–∞–∑–∞–¥']]
            await update.message.reply_text(f'–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å :(\n–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø–æ–º–µ–Ω—å—à–µ',
                                            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
            return 'YOUTUBE_POSTS'     
        else:        
            context.user_data['vids'] = int(update.message.text)
            channel_link = context.user_data['channel']
            max_videos = context.user_data['vids']
            channel_id = get_channel_id(channel_link)
            username = channel_link.split('/')[-1].replace('@', '')

            request = youtube.search().list(part="snippet", 
                                            channelId=channel_id, 
                                            maxResults=max_videos, order="date")
            response = request.execute()

            await update.message.reply_text(f"–ò—â—É —Ä–µ–∫–ª–∞–º—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {max_videos} –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞ {username}")
            time.sleep(1)
            advertisers_dict = defaultdict(lambda: [0, []]) 

            for item in response['items']:
                video_id = item['id']['videoId']
                video_info = youtube.videos().list(part='snippet', id=video_id).execute()
                description = video_info['items'][0]['snippet']['description']
                if description != '' and description is not None:
                    if 'erid' in description.lower() or '—Ä–µ–∫–ª–∞–º–∞' in description.lower():
                        message_link =f"https://www.youtube.com/watch?v={video_id}"
                        matches = re.findall(r'(?:–û–û–û|–ê–û|–ò–ü)\s+([\'"¬´‚Äú‚Äù¬ª][^\'"¬´‚Äú‚Äù¬ª]+[\'"¬´‚Äú‚Äù¬ª])', description)

                        if matches:
                            advertiser = matches[0]
                        else:
                            advertiser = '–î—Ä—É–≥–∏–µ'
                            
                        advertisers_dict[advertiser][0] += 1
                        advertisers_dict[advertiser][1].append(message_link)

            reply_keyboard = [['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è','–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã', '–ù–∞–∑–∞–¥']]
            formatted_text = "–í –∫–∞–Ω–∞–ª–µ —Ä–∞–∑–º–µ—â–∞–ª–∏—Å—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–∏:\n\n"
            if advertisers_dict:
                for advertiser, (count, links) in advertisers_dict.items():
                    formatted_text += f"{count} —Ä–∞–∑ ‚Äî {advertiser}:\n"
                    for link in links:
                        formatted_text += f"- {link}\n"
                    formatted_text += "\n"
            else:
                formatted_text = "–í –ø–æ—Å—Ç–∞—Ö –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∫–ª–∞–º—ã"

            await update.message.reply_text(formatted_text, 
                                            reply_markup=ReplyKeyboardMarkup(reply_keyboard, 
                                                                            resize_keyboard=True))
            return 'YOUTUBE_MENU'


async def youtube_sub(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —é—Ç—É–±-–∫–∞–Ω–∞–ª"""
    channel = update.message.text
    if channel.startswith('https://www.youtube.com/@') and get_channel_id(channel) not in yt_channels:
        yt_channels.append(get_channel_id(channel))
    elif channel == '–ù–∞–∑–∞–¥':
        reply_keyboard = [['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è','–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã', '–ù–∞–∑–∞–¥']]
        await update.message.reply_text('–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –ø–æ –≤–∏–¥–µ–æ',
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'YOUTUBE_MENU'
    else: 
        reply_keyboard = [['–ù–∞–∑–∞–¥']]
        await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —é—Ç—É–±-–∫–∞–Ω–∞–ª',
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'YOUTUBE_SUB'
    reply_keyboard = [['YouTube', 'Telegram']]
    await update.message.reply_text('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
                                    reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
    return 'PLATFORM'


async def check_ads_videos(update, context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–Ω–∞–ª–∞—Ö –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫"""
    global yt_channels, last_ad_videos
    bot = context.bot

    try:
        if len(yt_channels) != 0:
            for channel in yt_channels:
                last_post_id = last_ad_videos.get(channel)
                request = youtube.search().list(part="snippet", 
                                                channelId=channel, 
                                                maxResults=1, order="date")
                response = request.execute()

                for item in response['items']:
                    video_id = item['id']['videoId']
                    video_info = youtube.videos().list(part='snippet', id=video_id).execute()
                    description = video_info['items'][0]['snippet']['description']
                    if (description != '' and description is not None) and last_post_id != video_id:
                        if 'erid' in description.lower() or '—Ä–µ–∫–ª–∞–º–∞' in description.lower():
                            message_link =f"https://www.youtube.com/watch?v={video_id}"
                            last_ad_videos[channel] = video_id
                            await bot.send_message(telegram_id, f'–ù–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ {channel}: {message_link}')
                

    except Exception as err:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–Ω–∞–ª—É: {err}")


async def telegram_menu(update, context):
    """–ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ Telegram"""
    reply_keyboard = [['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è','–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã', '–ù–∞–∑–∞–¥']]
    await update.message.reply_text('–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –ø–æ –ø–æ—Å—Ç–∞–º',
                                    reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
    return 'TELEGRAM_MENU'


async def telegram_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Ç–µ–ª–µ–≥—Ä–∞–º–∞"""
    reply_keyboard = [['–ù–∞–∑–∞–¥']]
    if str(update.message.text) == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':
        await update.message.reply_text(f'–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª –∏–ª–∏ –µ–≥–æ @', 
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'TELEGRAM_SUB'
    elif str(update.message.text) == '–ù–∞–∑–∞–¥':
        reply_keyboard = [['YouTube', 'Telegram']]
        await update.message.reply_text(f'–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ üëá', 
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'PLATFORM'
    elif str(update.message.text) == '–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã':
        await update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª –∏–ª–∏ –µ–≥–æ @',
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, 
                                                                         resize_keyboard=True))
        return 'TELEGRAM_CHANNEL'


async def telegram_sub(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–≥-–∫–∞–Ω–∞–ª"""
    channel = update.message.text
    if channel.startswith('@') and channel not in tg_channels:
        tg_channels.append(channel)
    elif channel.startswith('https://t.me') and convert_link_to_text(channel) not in tg_channels:
        tg_channels.append(convert_link_to_text(channel))
    elif channel == '–ù–∞–∑–∞–¥':
        reply_keyboard = [['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è','–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã', '–ù–∞–∑–∞–¥']]
        await update.message.reply_text('–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –ø–æ –ø–æ—Å—Ç–∞–º',
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'TELEGRAM_MENU'
    else: 
        reply_keyboard = [['–ù–∞–∑–∞–¥']]
        await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ @',
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'TELEGRAM_SUB'
    reply_keyboard = [['YouTube', 'Telegram']]
    await update.message.reply_text('–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
                                    reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
    return 'PLATFORM'


async def check_ads_channels(context):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ —Å —Ä–µ–∫–ª–∞–º–æ–π"""
    global tg_channels, last_ad_posts
    bot = context.bot
    client = TelegramClient('my-client', api_id, api_hash)

    try:
        await client.start()
        if len(tg_channels) != 0:
            for channel in tg_channels:
                last_post_id = last_ad_posts.get(channel)
                entity = await client.get_entity(channel)
                async for message in client.iter_messages(entity, limit=1):
                    if (message.raw_text != '' and message.raw_text is not None) and last_post_id != message.id:
                        if 'erid' in message.raw_text.lower() or '—Ä–µ–∫–ª–∞–º–∞' in message.raw_text.lower():
                            last_ad_posts[channel] = message.id
                            message_link = f"https://t.me/{channel[1:]}/{message.id}"
                            await bot.send_message(telegram_id, f'–ù–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel}: {message_link}')

    except Exception as err:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–Ω–∞–ª—É: {err}")
        
    finally:
        await client.disconnect()


async def telegram_channel(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞"""
    channel = update.message.text
    if channel.startswith('@'):
        context.user_data['channel'] = channel
    elif channel.startswith('https://t.me'):
        context.user_data['channel'] = convert_link_to_text(channel)
    elif channel == '–ù–∞–∑–∞–¥':
        reply_keyboard = [['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è','–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã', '–ù–∞–∑–∞–¥']]
        await update.message.reply_text('–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –ø–æ –ø–æ—Å—Ç–∞–º',
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'TELEGRAM_MENU'
    else: 
        reply_keyboard = [['–ù–∞–∑–∞–¥']]
        await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ @',
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'TELEGRAM_CHANNEL'
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫")
    return 'TELEGRAM_POSTS'
    

async def telegram_posts(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫"""
    if update.message.text == '–ù–∞–∑–∞–¥': 
        reply_keyboard = [['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è','–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã', '–ù–∞–∑–∞–¥']]
        await update.message.reply_text('–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –ø–æ –ø–æ—Å—Ç–∞–º',
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return 'TELEGRAM_MENU'
    else: 
        context.user_data['posts'] = int(update.message.text)
        channel_link = context.user_data['channel']
        num_posts = context.user_data['posts']
        
        await update.message.reply_text(f"–ò—â—É —Ä–µ–∫–ª–∞–º—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {num_posts} –ø–æ—Å—Ç–∞—Ö –∫–∞–Ω–∞–ª–∞ {channel_link}")
        advertisers_dict = defaultdict(lambda: [0, []]) 
        client = TelegramClient('anon', api_id, api_hash)
        
        try:
            await client.start()
            entity = await client.get_entity(channel_link)
            async for message in client.iter_messages(entity, limit=num_posts):
                # print(message.raw_text)
                if message.raw_text != '' and message.raw_text is not None:
                    if 'erid' in message.raw_text.lower() or '—Ä–µ–∫–ª–∞–º–∞' in message.raw_text.lower():
                        message_link = f"https://t.me/{channel_link[1:]}/{message.id}"
                        matches = re.findall(r'(?:–û–û–û|–ê–û|–ò–ü)\s+([\'"¬´‚Äú‚Äù¬ª][^\'"¬´‚Äú‚Äù¬ª]+[\'"¬´‚Äú‚Äù¬ª])', message.text)

                        if matches:
                            advertiser = matches[0]
                        else:
                            advertiser = '–î—Ä—É–≥–∏–µ'
                
                        advertisers_dict[advertiser][0] += 1
                        advertisers_dict[advertiser][1].append(message_link)
        
        except Exception as err:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–Ω–∞–ª—É: {err}")
        
        finally:
            await client.disconnect()

        reply_keyboard = [['–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è','–ü–æ–∏—Å–∫ —Ä–µ–∫–ª–∞–º—ã', '–ù–∞–∑–∞–¥']]
        formatted_text = "–í –∫–∞–Ω–∞–ª–µ —Ä–∞–∑–º–µ—â–∞–ª–∏—Å—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–∏:\n\n"
        if advertisers_dict:
            for advertiser, (count, links) in advertisers_dict.items():
                formatted_text += f"{count} —Ä–∞–∑ ‚Äî {advertiser}:\n"
                for link in links:
                    formatted_text += f"- {link}\n"
                formatted_text += "\n"
        else:
            formatted_text = "–í –ø–æ—Å—Ç–∞—Ö –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∫–ª–∞–º—ã"

        await update.message.reply_text(formatted_text, 
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, 
                                                                         resize_keyboard=True))

        return 'TELEGRAM_MENU'


async def cancel(update, context):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—Ç–∞"""
    await update.message.reply_text('–î–æ –≤—Å—Ç—Ä–µ—á–∏!', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ–æ—Ç—ã –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            'PLATFORM': [MessageHandler(filters.Regex('^(YouTube)$'), youtube_menu),
                        MessageHandler(filters.Regex('^(Telegram)$'), telegram_menu)],

            'YOUTUBE_MENU': [MessageHandler(filters.TEXT & ~filters.COMMAND, youtube_handler)],
            'YOUTUBE_SUB': [MessageHandler(filters.TEXT & ~filters.COMMAND, youtube_sub)],
            'YOUTUBE_CHANNEL': [MessageHandler(filters.TEXT & ~filters.COMMAND, youtube_channel)],
            'YOUTUBE_POSTS': [MessageHandler(filters.TEXT & ~filters.COMMAND, youtube_posts)],

            'TELEGRAM_MENU': [MessageHandler(filters.TEXT & ~filters.COMMAND, telegram_handler)],
            'TELEGRAM_SUB': [MessageHandler(filters.TEXT & ~filters.COMMAND, telegram_sub)],
            'TELEGRAM_CHANNEL': [MessageHandler(filters.TEXT & ~filters.COMMAND, telegram_channel)],
            'TELEGRAM_POSTS': [MessageHandler(filters.TEXT & ~filters.COMMAND, telegram_posts)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(conv_handler)
    application.job_queue.run_repeating(check_ads_channels, interval=60, first=0)
    application.job_queue.run_repeating(check_ads_videos, interval=86400, first=0)

    application.run_polling()

if __name__ == "__main__":
    main()
